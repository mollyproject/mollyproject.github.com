:mod:`molly.apps.service_status` -- Service status
==================================================

.. module :: molly.apps.service_status

The service status application is intended to display whether services are up
or down (or somewhere in between).

In the most part, such information would be provided by an RSS feed. We
encourage the use of the `service status RSS module`_, the concepts of which
are used in the provider interface.

.. _service status RSS module: http://web.resource.org/rss/1.0/modules/servicestatus/

To use, place the following in your :doc:`settings module </topics/settings>`::

    APPLICATIONS = [
        # ...
        Application('molly.apps.service_status', 'service_status',
            provider = '...'  # path to contact provider backend
        ),
        # ...
    ]

If you're using the `service status RSS module
<http://web.resource.org/rss/1.0/modules/servicestatus/>`_, you can use the
:class:`~molly.contrib.generic.providers.ServiceStatusProvider`::

    from molly.conf.settings import Provider

    APPLICATIONS = [
        # ...
        Application('molly.apps.service_status', 'service_status',
            provider = Provider('molly.contrib.generic.providers.ServiceStatusProvider',
                name = 'Hogwarts Computing Services',
                slug = 'hcs',
                url = 'http://status.hogwarts.ac.wizardry/status.rss',
            ),
        ),
        # ...
    ]


Service status providers
-----------------

A contact provider must inherit :class:`~molly.apps.service_status.providers.BaseServiceStatusProvider` and expose the following interface:

.. class :: providers.BaseServiceStatusProvider

   .. note :: Everything from here on down needs updating

   .. attribute :: handles_pagination

      A boolean specifying whether the contact provider will provide a
      :class:`~django.core.paginator.Paginator` instance. Useful when an
      external service determines pagination for the returned results. When
      this is :const:`True`, an extra :data:`page` argument is passed to
      :meth:`~molly.apps.contact.providers.ContactProvider.perform_query`.

   .. attribute :: form

      A class object inheriting :class:`~django.forms.Form` to be presented to
      the user and used for input validation. If not overriden, defaults to
      :class:`~molly.apps.contact.forms.GenericContactForm`, which presents a
      single query field.

   .. method :: normalize_query(self, cleaned_data)

      This method is provided the  :attr:`cleaned_data` attribute from the
      form presented to the user. Must return a dictionary which will be
      passed as :data:`**kwargs` to :meth:`perform_query`.

   .. method :: perform_query(self, page=None, **kwargs)

      This method performs a contact lookup based on :data:`**kwargs`. If
      :attr:`handles_pagination` is :const:`True`, the :data:`page` argument
      must be accepted and a :class:`~django.core.paginator.Paginator`
      instance returned. Otherwise, no :data:`page` argument will be provided
      and the method must return a list containing all results.

      Each result must be a dictionary containing some subset of the following
      keys (taken from :rfc:`4519` which defines standard LDAP attributes):

      * `cn` (common name)
      * `givenName`
      * `sn` (surname)
      * `telephoneNumber`
      * `facsimileTelephoneNumber`
      * `mail` (e-mail addresses)
      * `roomNumber`
      * `title` (job role, etc.)
      * `ou` (organisational unit, e.g. department)

      With the exception of `cn`, all should be lists.

      .. note ::

         Yet to be implemented

      Additionally, a result may contain an `id` item, containing a unique
      identifier which may be passed to :meth:`fetch_result`. `id`\ s must be
      URI-safe and not contain forward slashes.

   .. method :: fetch_result(self, id):

      .. note ::

         Yet to be implemented

      May optionally be defined to return the full record for a person, where
      it is decided that :meth:`perform_query` should return a subset of the
      available fields.

      If defined, the default results template will provide a link to a page
      for the individual.

Defined views
-------------

The following views are provided by default:

.. class :: molly.apps.contact.views.IndexView(request)

   Static view, rendering :file:`contact/index.html`

.. class :: molly.apps.contact.views.ResultListView(request)

   Creates a form from
   :attr:`~molly.apps.contact.providers.BaseContactProvider.form`, passing the
   GET parameters from the request; retrieves the results using the form's
   cleaned data and renders into :file:`contact/result_list.html`.

.. class :: molly.apps.contact.views.ResultDetailView(request, id)

   :param id: :const:`unicode<types.UnicodeType>` string containing a unique
              identifier for an individual

   Takes an identifier as provided by
   :meth:`~molly.apps.contact.providers.BaseContactProvider.perform_query` and
   renders the full record into :file:`contact/result_detail.html`.

Currently implemented providers
-------------------------------

Though you will probably want to define your own, Molly currently comes with
three providers for you to study, each retrieving results using a different
technique.

:class:`molly.contrib.oxford.providers.ContactProvider`
    This queries a non-public XML web service run by Oxford University
    Computing Services. As such, it has no functional use for those without
    access to the web service.
:class:`molly.contrib.oxford.providers.ScrapingContactProvider`
    Scrapes details from the University's public contact search page.
:class:`molly.contrib.mit.providers.LDAPContactProvider`
    Retrieves results from MIT's public LDAP server.


